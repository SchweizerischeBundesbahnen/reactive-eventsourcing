akka {
  actor {
    allow-java-serialization = true # serialization of events in store (only for demo, in prod protobuf or similar is used)
  }

  persistence {
    # event store (journal)
    journal {
      plugin = "akka.persistence.journal.leveldb"
      leveldb.dir = "target/journal"
    }

    # snapshot store (local file-based)
    snapshot-store {
      plugin = "akka.persistence.snapshot-store.local"
      local.dir = "target/snapshots"
    }

    # event store config ("leveldb")
    query.journal.leveldb {
      # Implementation class of the LevelDB ReadJournalProvider
      class = "akka.persistence.query.journal.leveldb.LeveldbReadJournalProvider"

      # Absolute path to the write journal plugin configuration entry that this
      # query journal will connect to. That must be a LeveldbJournal or SharedLeveldbJournal.
      # If undefined (or "") it will connect to the default journal as specified by the
      # akka.persistence.journal.plugin property.
      write-plugin = ""

      # The LevelDB write journal is notifying the query side as soon as things
      # are persisted, but for efficiency reasons the query side retrieves the events
      # in batches that sometimes can be delayed up to the configured `refresh-interval`.
      refresh-interval = 1s

      # How many events to fetch in one query (replay) and keep buffered until they
      # are delivered downstreams.
      max-buffer-size = 100
    }
  }

  # websocket config
  http.server.websocket {
    periodic-keep-alive-max-idle = 5 second
  }

  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "debug"
  stdout-loglevel = "debug"

}

# application specific config
eventsourcing {
  # http port (server)
  http.port = 8080
  # file path of "verkehrsmittel.csv" (important: no classpath resource!)
  command-file.path = "C:/userdata/temp/verkehrsmittel.csv" # adjust this path according your own needs!
}
